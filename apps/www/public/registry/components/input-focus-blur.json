{
  "name": "input-focus-blur",
  "type": "ui:components",
  "externalDependencies": [
    "tailwind-variants"
  ],
  "internalDependencies": [],
  "files": [
    {
      "name": "input-focus-blur.tsx",
      "content": "\"use client\"; // @NOTE: Add in case you are using Next.js\n\nimport { forwardRef, useState, useCallback } from \"react\";\n\nimport { motion, type AnimationProps } from \"motion/react\";\n\nimport { tv } from \"tailwind-variants\";\n\nimport { AlertCircle } from \"lucide-react\";\n\ninterface InputFocusBlurProps extends React.ComponentProps<\"input\"> {\n  feedbackError?: string;\n}\n\nconst EIXO_X_PLACEHOLDER = 24;\nconst STANDARD_DURATION = 0.3;\n\nconst inputFocusBlurStyles = tv({\n  slots: {\n    baseStyle: `w-full h-[42px] px-3 flex items-center rounded-xl border border-neutral-200 dark:border-neutral-800 focus-within:border-neutral-300 dark:focus-within:border-neutral-200 \n    bg-neutral-50 dark:bg-neutral-900 transition-all duration-200 relative data-[filled=true]:border-neutral-300 dark:data-[filled=true]:border-neutral-200`,\n    inputStyle: `flex-1 h-full py-2 outline-none text-sm text-neutral-500 dark:text-neutral-300 bg-transparent relative z-[9999] placeholder:sr-only \n    disabled:cursor-not-allowed`,\n    placeholderStyle: `text-sm text-neutral-500 absolute left-3`,\n    feedbackErrorStyle: `flex items-center gap-1 text-xs text-red-300 mt-1`,\n  },\n  variants: {\n    error: {\n      true: {\n        baseStyle: `border-red-300`,\n      },\n    },\n    disabled: {\n      true: {\n        baseStyle: `bg-neutral-200 dark:bg-neutral-800 cursor-not-allowed`,\n      },\n    },\n  },\n});\n\nconst { baseStyle, inputStyle, placeholderStyle, feedbackErrorStyle } =\n  inputFocusBlurStyles();\n\nexport const InputFocusBlur = forwardRef<HTMLInputElement, InputFocusBlurProps>(\n  ({ placeholder, feedbackError = \"\", disabled, value, ...props }, ref) => {\n    const [isFocus, setIsFocus] = useState(false);\n    const [internalValue, setInternalValue] = useState(\"\");\n\n    const handle = useCallback((type: \"focus\" | \"blur\") => {\n      setIsFocus(type === \"focus\");\n    }, []);\n\n    function observeFieldChange(event: React.ChangeEvent<HTMLInputElement>) {\n      setInternalValue(event.target.value);\n    }\n\n    const isFilled = internalValue.length > 0 || !!value;\n    const isFocusOrFilled = isFocus || isFilled;\n\n    const isError = feedbackError.length > 0 && !disabled;\n\n    const placeholderAnimation: AnimationProps[\"animate\"] = isFocusOrFilled\n      ? {\n          x: EIXO_X_PLACEHOLDER,\n          filter: \"blur(4px)\",\n          opacity: 0,\n        }\n      : {\n          x: 0,\n        };\n\n    return (\n      <div className=\"w-full max-w-[300px]\">\n        <div\n          className={baseStyle({ error: isError, disabled })}\n          data-filled={isFilled}\n        >\n          <input\n            ref={ref}\n            type=\"text\"\n            className={inputStyle()}\n            placeholder={placeholder}\n            onFocus={() => handle(\"focus\")}\n            onBlur={() => handle(\"blur\")}\n            onChange={observeFieldChange}\n            disabled={disabled}\n            value={value}\n            {...props}\n          />\n\n          <motion.span\n            className={placeholderStyle()}\n            initial={{\n              x: 0,\n            }}\n            animate={placeholderAnimation}\n            transition={{\n              easings: [\"easeOut\"],\n              duration: STANDARD_DURATION,\n            }}\n          >\n            {placeholder}\n          </motion.span>\n        </div>\n\n        {isError && (\n          <motion.span\n            className={feedbackErrorStyle()}\n            initial={{\n              opacity: 0,\n            }}\n            animate={{\n              opacity: 1,\n            }}\n            transition={{\n              duration: STANDARD_DURATION,\n            }}\n          >\n            <AlertCircle size={12} />\n            {feedbackError}\n          </motion.span>\n        )}\n      </div>\n    );\n  },\n);\n\nInputFocusBlur.displayName = \"InputFocusBlur\";\n"
    }
  ]
}