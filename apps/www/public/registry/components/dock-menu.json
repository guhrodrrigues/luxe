{
  "name": "dock-menu",
  "type": "ui:components",
  "externalDependencies": [],
  "internalDependencies": [],
  "files": [
    {
      "name": "dock-menu.tsx",
      "content": "\"use client\";\n\nimport { type ElementRef, type HTMLAttributes, useRef } from \"react\";\n\nimport { cn } from '<%= it.aliases.utils %>/cn';\n\nimport { AlbumIcon, HomeIcon, MonitorIcon } from \"lucide-react\";\n\nimport {\n  type MotionValue,\n  motion,\n  useMotionValue,\n  useSpring,\n  useTransform,\n} from \"motion/react\";\n\nexport function DockMenu() {\n  const items = [\n    { icon: <HomeIcon size={24} /> },\n    { icon: <AlbumIcon size={24} /> },\n    { icon: <MonitorIcon size={24} /> },\n  ];\n\n  return <Dock items={items} />;\n}\n\ntype DockItem = {\n  icon: JSX.Element;\n};\n\ntype DockContainerProps = {\n  side?: \"top\" | \"bottom\";\n  items: DockItem[];\n} & HTMLAttributes<HTMLDivElement>;\n\nfunction Dock({\n  side = \"bottom\",\n  className,\n  items,\n  ...props\n}: DockContainerProps) {\n  const mouseX = useMotionValue(Infinity);\n  const containerX = useMotionValue(0);\n\n  const containerRef = useRef<ElementRef<\"div\">>(null);\n\n  return (\n    <div\n      {...props}\n      className={cn(side === \"top\" ? \"top-4\" : \"bottom-4\", className)}\n    >\n      <motion.div\n        ref={containerRef}\n        className=\"flex h-14 items-end gap-2 rounded-full border border-neutral-200 bg-neutral-100 px-3 pb-1.5 dark:border-neutral-800/50 dark:bg-neutral-950\"\n        onMouseLeave={() => mouseX.set(Infinity)}\n        onMouseMove={(e: MouseEvent) => {\n          const rect = containerRef.current?.getBoundingClientRect();\n\n          if (rect) {\n            mouseX.set(e.clientX - rect.left);\n            containerX.set(rect.x);\n          }\n        }}\n      >\n        {items.map(({ icon }, idx) => (\n          <DockItem key={idx} containerX={containerX} mouseX={mouseX}>\n            {icon}\n          </DockItem>\n        ))}\n      </motion.div>\n    </div>\n  );\n}\n\ninterface DockItemProps extends HTMLAttributes<HTMLElement> {\n  mouseX: MotionValue<number>;\n  containerX: MotionValue<number>;\n}\n\nfunction DockItem({ children, containerX, mouseX }: DockItemProps) {\n  const itemRef = useRef<ElementRef<\"div\">>(null);\n\n  const distance = useTransform(mouseX, (val) => {\n    const bounds = itemRef.current?.getBoundingClientRect() ?? {\n      x: 0,\n      width: 0,\n      left: 0,\n    };\n\n    const XDiffToContainerX = bounds?.x - containerX.get();\n\n    return val - bounds?.width / 2 - XDiffToContainerX;\n  });\n\n  const widthSync = useTransform(distance, [-125, 0, 125], [44, 85, 44]);\n  const width = useSpring(widthSync);\n\n  return (\n    <motion.div\n      role=\"button\"\n      ref={itemRef}\n      className=\"group flex aspect-square items-center justify-center overflow-hidden rounded-full bg-neutral-200 p-2 text-neutral-500 transition duration-500 active:-translate-y-10 active:duration-1000 active:ease-out dark:bg-neutral-900 dark:text-neutral-400\"\n      style={{\n        width,\n      }}\n    >\n      {children}\n    </motion.div>\n  );\n}\n"
    }
  ]
}