{
  "name": "badge",
  "type": "ui:components",
  "externalDependencies": [
    "@radix-ui/react-slot"
  ],
  "internalDependencies": [],
  "files": [
    {
      "name": "badge.tsx",
      "content": "'use client' // @NOTE: Add in case you are using Next.js\n\nimport { motion } from 'motion/react'\nimport * as Slot from '@radix-ui/react-slot'\n\nimport { cn } from '@/utils/cn'\n\ntype Variant = {\n  variant: string\n  component: React.FC<React.ComponentProps<'div'>>\n}\n\nconst variants: readonly Variant[] = [\n  {\n    variant: 'default',\n    component: ({ className, ...props }) => (\n      <div\n        {...props}\n        className={cn(\n          'relative overflow-hidden rounded-xl border border-transparent bg-neutral-900 px-3 py-1 text-neutral-200 shadow-inner transition-all duration-200',\n          'shadow-main-foreground/70 hover:bg-main-invert/90 dark:shadow-main-foreground/80 dark:hover:bg-main-foreground/56',\n          className,\n        )}\n      />\n    ),\n  },\n  {\n    variant: 'outline',\n    component: ({ className, ...props }) => (\n      <div\n        {...props}\n        className={cn(\n          'relative overflow-hidden rounded-full border border-border px-3 py-1 transition-all duration-200',\n          'text-primary-foreground hover:bg-main-foreground/50',\n        )}\n      />\n    ),\n  },\n  {\n    variant: 'success',\n    component: ({ className, ...props }) => (\n      <div\n        {...props}\n        className={cn(\n          'rounded-full bg-gradient-to-t from-green-700 to-green-600 px-3 py-1 text-white',\n          className,\n        )}\n      />\n    ),\n  },\n  {\n    variant: 'destructive',\n    component: ({ className, ...props }) => (\n      <div\n        {...props}\n        className={cn(\n          'rounded-full bg-gradient-to-t from-red-600 to-red-500 px-3 py-1 text-white',\n          className,\n        )}\n      />\n    ),\n  },\n  {\n    variant: 'shine',\n    component: ({ className, ...props }) => (\n      <div\n        {...props}\n        className={cn(\n          'animate-shine items-center justify-center rounded-full border border-border bg-[length:400%_100%]',\n          'px-3 py-1 text-primary-invert/90 transition-colors dark:text-primary-muted',\n\t\t\t\t\t\"bg-[linear-gradient(110deg,#000000,45%,#303030,55%,#000000)]\",\n          'dark:bg-[linear-gradient(110deg,#000103,45%,#303030,55%,#000103)]',\n          className,\n        )}\n      />\n    ),\n  },\n  {\n    variant: 'animated-border',\n    component: ({ children, className, ...props }) => (\n      <div\n        {...props}\n        className={cn(\n          'relative rounded-full border border-primary/10 px-3 py-1 duration-200 hover:bg-main-foreground/40',\n          className,\n        )}\n      >\n        <div\n          className={cn(\n            '-inset-px pointer-events-none absolute rounded-[inherit] border border-transparent [mask-clip:padding-box,border-box]',\n            '[mask-composite:intersect] [mask-image:linear-gradient(transparent,transparent),linear-gradient(#000,#000)]',\n          )}\n        >\n          <motion.div\n            className={cn(\n              'absolute aspect-square bg-gradient-to-r from-transparent via-neutral-300 to-neutral-400',\n              'dark:from-transparent dark:via-neutral-600 dark:to-neutral-400',\n            )}\n            animate={{\n              offsetDistance: ['0%', '100%'],\n            }}\n            style={{\n              width: 20,\n              offsetPath: `rect(0 auto auto 0 round ${20}px)`,\n            }}\n            transition={{\n              repeat: Number.POSITIVE_INFINITY,\n              duration: 5,\n              ease: 'linear',\n            }}\n          />\n        </div>\n        <span className=\"relative z-10 text-primary-muted\">\n          {children}\n        </span>\n      </div>\n    ),\n  },\n  {\n    variant: 'rotate-border',\n    component: ({ children, className, ...props }) => (\n      <div\n        {...props}\n        className=\"relative inline-flex overflow-hidden rounded-full p-px\"\n      >\n        <span\n          className={cn(\n            'absolute inset-[-1000%] animate-[spin_2s_linear_infinite] bg-[conic-gradient(from_90deg_at_50%_50%,#4e4e4e_0%,#d4d4d4_50%,#414141_100%)]',\n            'dark:bg-[conic-gradient(from_90deg_at_50%_50%,#c2c2c2_0%,#505050_50%,#bebebe_100%)]',\n          )}\n        />\n        <span\n          className={cn(\n            'inline-flex size-full items-center justify-center rounded-full bg-main-background px-3 py-1 text-primary-foreground backdrop-blur-3xl',\n            className,\n          )}\n        >\n          {children}\n        </span>\n      </div>\n    ),\n  },\n] as const\n\nexport type BadgeProps = {\n  variant?: (typeof variants)[number]['variant']\n} & React.ComponentProps<'div'>\n\nexport function Badge({\n  variant = 'default',\n  className,\n  ...props\n}: BadgeProps) {\n  const FALLBACK_INDEX = 0\n\n  const variantComponent = variants.find(v => v.variant === variant)?.component\n\n  if (!variantComponent) {\n    return variants[FALLBACK_INDEX].component(props)\n  }\n\n  return (\n    <Slot.Root className={cn('font-medium text-xs')}>\n      {variantComponent\n        ? variantComponent({ className, ...props })\n        : variants[FALLBACK_INDEX].component({ className, ...props })}\n    </Slot.Root>\n  )\n}\n"
    }
  ]
}