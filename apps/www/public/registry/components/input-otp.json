{
  "name": "input-otp",
  "externalDependencies": [
    "input-otp"
  ],
  "internalDependencies": [],
  "file": {
    "name": "input-otp.tsx",
    "content": "'use client' // @NOTE: Add in case you are using Next.js\r\n\r\nimport { useContext } from 'react'\r\n\r\nimport { OTPInput, OTPInputContext } from 'input-otp'\r\nimport {\r\n  AnimatePresence,\r\n  type AnimationProps,\r\n  MotionConfig,\r\n  motion,\r\n} from 'motion/react'\r\n\r\nimport { cn } from '<%= it.aliases.utils %>/cn'\r\n\r\ntype InputOTPProps = React.ComponentProps<typeof OTPInput>\r\n\r\nexport function InputOTP({\r\n  containerClassName,\r\n  className,\r\n  ...props\r\n}: InputOTPProps) {\r\n  return (\r\n    <OTPInput\r\n      data-slot=\"input-otp\"\r\n      containerClassName={cn(\r\n        'flex items-center gap-2 has-disabled:opacity-50',\r\n        containerClassName,\r\n      )}\r\n      className={cn('disabled:cursor-not-allowed', className)}\r\n      {...props}\r\n    />\r\n  )\r\n}\r\n\r\ntype InputOTPGroupProps = React.ComponentProps<'div'>\r\n\r\nexport function InputOTPGroup({ className, ...props }: InputOTPGroupProps) {\r\n  return (\r\n    <div\r\n      data-slot=\"input-otp-group\"\r\n      className={cn('flex items-center gap-1', className)}\r\n      {...props}\r\n    />\r\n  )\r\n}\r\n\r\ntype InputOTPAnimatedNumberProps = {\r\n  value: string | null\r\n}\r\n\r\nfunction InputOTPAnimatedNumber({ value }: InputOTPAnimatedNumberProps) {\r\n  const animationProps: AnimationProps = {\r\n    initial: { opacity: 0.2, y: 20 },\r\n    animate: { opacity: 1, y: 0 },\r\n    exit: { opacity: 0, y: 0 },\r\n  }\r\n\r\n  return (\r\n    <div className=\"relative flex size-[inherit] items-center justify-center overflow-hidden\">\r\n      <AnimatePresence mode=\"wait\">\r\n        <motion.span\r\n          key={value}\r\n          data-slot=\"input-otp-animated-number\"\r\n          transition={{ duration: 0.09, ease: 'easeOut' }}\r\n          {...animationProps}\r\n        >\r\n          {value}\r\n        </motion.span>\r\n      </AnimatePresence>\r\n    </div>\r\n  )\r\n}\r\n\r\ntype InputOTPSlotProps = {\r\n  index: number\r\n} & React.ComponentProps<typeof motion.div>\r\n\r\nexport function InputOTPSlot({\r\n  index,\r\n  className,\r\n  ...props\r\n}: InputOTPSlotProps) {\r\n  const inputOTPContext = useContext(OTPInputContext)\r\n  const { char, hasFakeCaret, isActive } = inputOTPContext?.slots[index] ?? {}\r\n\r\n  const activeSlots = inputOTPContext?.slots.filter(slot => slot.isActive) ?? []\r\n  const isMultiSelect = activeSlots.length > 1\r\n\r\n  return (\r\n    <MotionConfig reducedMotion=\"user\">\r\n      <motion.div\r\n        data-slot=\"input-otp-slot\"\r\n        className={cn(\r\n          'group relative flex h-10 w-9 items-center justify-center rounded-[10px] border border-border bg-main-muted font-medium text-base text-primary-foreground',\r\n          'aria-invalid:border-red-500 data-[active=true]:aria-invalid:border-red-500 data-[active=true]:aria-invalid:ring-2 data-[active=true]:aria-invalid:ring-red-500',\r\n          className,\r\n        )}\r\n        {...props}\r\n      >\r\n        {char && <InputOTPAnimatedNumber value={char} />}\r\n\r\n        {hasFakeCaret && <FakeCaret />}\r\n\r\n        <AnimatePresence mode=\"wait\">\r\n          {isActive && (\r\n            <motion.div\r\n              key={`${isActive}-${isMultiSelect}`}\r\n              layoutId={isMultiSelect ? `indicator-${index}` : 'indicator'}\r\n              className=\"absolute inset-0 z-10 rounded-[inherit] ring-2 ring-border\"\r\n              transition={{ duration: 0.12, ease: 'easeInOut' }}\r\n            />\r\n          )}\r\n        </AnimatePresence>\r\n      </motion.div>\r\n    </MotionConfig>\r\n  )\r\n}\r\n\r\ntype InputOTPSeparatorProps = React.ComponentProps<'div'>\r\n\r\nexport function InputOTPSeparator({\r\n  className,\r\n  ...props\r\n}: InputOTPSeparatorProps) {\r\n  return (\r\n    <div\r\n      data-slot=\"input-otp-separator\"\r\n      aria-hidden\r\n      className={cn('h-0.5 w-2 rounded-full bg-border', className)}\r\n      {...props}\r\n    />\r\n  )\r\n}\r\n\r\nfunction FakeCaret() {\r\n  return (\r\n    <div\r\n      aria-hidden\r\n      className=\"pointer-events-none absolute inset-0 flex items-center justify-center\"\r\n    >\r\n      <div className=\"h-4.5 w-px bg-primary-muted motion-safe:animate-caret-blink motion-safe:duration-1000\" />\r\n    </div>\r\n  )\r\n}\r\n"
  }
}