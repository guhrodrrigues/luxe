{
  "name": "card",
  "externalDependencies": [
    "@radix-ui/react-slot"
  ],
  "internalDependencies": [],
  "file": {
    "name": "card.tsx",
    "content": "'use client' // @NOTE: Add in case you are using Next.js\n\nimport { motion, useMotionTemplate, useMotionValue } from 'motion/react'\n\nimport * as Slot from '@radix-ui/react-slot'\n\nimport { cn } from '<%= it.aliases.utils %>/cn'\n\ntype Variant = {\n  variant: string\n  component: React.FC<React.ComponentProps<'div'>>\n}\n\nconst variants: readonly Variant[] = [\n  {\n    variant: 'default',\n    component: ({ children, className, ...props }) => (\n      <div\n        {...props}\n        className={cn(\n          'relative rounded-xl border border-primary/10 bg-main-background px-4 py-5',\n          className,\n        )}\n      >\n        {children}\n      </div>\n    ),\n  },\n  {\n    variant: 'animated-border',\n    component: ({ children, className, ...props }) => (\n      <div\n        {...props}\n        className={cn(\n          'relative rounded-xl border border-primary/10 px-4 py-5',\n          className,\n        )}\n      >\n        <div\n          className={cn(\n            '-inset-px pointer-events-none absolute rounded-[inherit] border border-transparent [mask-clip:padding-box,border-box]',\n            '[mask-composite:intersect] [mask-image:linear-gradient(transparent,transparent),linear-gradient(#000,#000)]',\n          )}\n        >\n          <motion.div\n            className={cn(\n              'absolute aspect-square bg-gradient-to-r from-transparent via-neutral-400 to-neutral-500',\n              'dark:from-transparent dark:via-neutral-600 dark:to-neutral-400',\n            )}\n            animate={{\n              offsetDistance: ['0%', '100%'],\n            }}\n            style={{\n              width: 42,\n              offsetPath: `rect(0 auto auto 0 round ${18}px)`,\n            }}\n            transition={{\n              repeat: Number.POSITIVE_INFINITY,\n              duration: 5,\n              ease: 'linear',\n            }}\n          />\n        </div>\n        <span className=\"relative z-10\">\n          {children}\n        </span>\n      </div>\n    ),\n  },\n  {\n    variant: 'shine',\n    component: ({ children, className, ...props }) => (\n      <div\n        {...props}\n        className={cn(\n          'inline-flex animate-shine items-center justify-center rounded-xl border border-white/10 px-4 py-5',\n          'bg-[length:400%_100%] bg-[linear-gradient(110deg,#000000,45%,#303030,55%,#000000)]',\n          'text-sm transition-colors dark:bg-[linear-gradient(110deg,#000103,45%,#303030,55%,#000103)]',\n          className,\n        )}\n      >\n        {children}\n      </div>\n    ),\n  },\n  {\n    variant: 'revealed-pointer',\n    component: ({ children, className, ...props }) => {\n      const mouseX = useMotionValue(0)\n      const mouseY = useMotionValue(0)\n\n      return (\n        <div\n          onMouseMove={e => {\n            const { left, top } = e.currentTarget.getBoundingClientRect()\n\n            mouseX.set(e.clientX - left)\n            mouseY.set(e.clientY - top)\n          }}\n          className={cn(\n            'group relative overflow-hidden rounded-xl bg-border/50 p-px',\n          )}\n        >\n          <motion.div\n            className={cn(\n              '-inset-px pointer-events-none absolute rounded-xl opacity-0 transition duration-300 group-hover:opacity-20',\n              '[--color:var(--color-primary)]',\n            )}\n            style={{\n              background: useMotionTemplate`radial-gradient(200px circle at ${mouseX}px ${mouseY}px, var(--color), transparent 80%)`,\n            }}\n          />\n          <div\n            {...props}\n            className={cn(\n              'relative select-none rounded-xl bg-main-background px-4 py-5',\n              className,\n            )}\n          >\n            {children}\n          </div>\n        </div>\n      )\n    },\n  },\n] as const\n\nexport type CardProps = {\n  variant?: (typeof variants)[number]['variant']\n} & React.ComponentProps<'div'>\n\nexport function Card({ variant = 'default', className, ...props }: CardProps) {\n  const FALLBACK_INDEX = 0\n\n  const variantComponent = variants.find(v => v.variant === variant)?.component\n\n  if (!variantComponent) {\n    return variants[FALLBACK_INDEX].component(props)\n  }\n\n  return (\n    <Slot.Root className=\"w-full max-w-[350px]\">\n      {variantComponent\n        ? variantComponent({ ...props, className })\n        : variants[FALLBACK_INDEX].component({ ...props, className })}\n    </Slot.Root>\n  )\n}\n"
  }
}