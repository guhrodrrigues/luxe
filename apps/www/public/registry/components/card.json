{
  "name": "card",
  "externalDependencies": [
    "@radix-ui/react-slot"
  ],
  "internalDependencies": [],
  "file": {
    "name": "card.tsx",
    "content": "'use client' // @NOTE: Add in case you are using Next.js\r\n\r\nimport { motion, useMotionTemplate, useMotionValue } from 'motion/react'\r\n\r\nimport * as Slot from '@radix-ui/react-slot'\r\n\r\nimport { cn } from '<%= it.aliases.utils %>/cn'\r\n\r\ntype Variant = {\r\n  variant: string\r\n  component: React.FC<React.ComponentProps<'div'>>\r\n}\r\n\r\nconst variants = [\r\n  {\r\n    variant: 'default',\r\n    component: ({ children, className, ...props }) => (\r\n      <div\r\n        {...props}\r\n        className={cn(\r\n          'relative rounded-xl border border-primary/10 bg-main-background px-4 py-5',\r\n          className,\r\n        )}\r\n      >\r\n        {children}\r\n      </div>\r\n    ),\r\n  },\r\n  {\r\n    variant: 'animated-border',\r\n    component: ({ children, className, ...props }) => (\r\n      <div\r\n        {...props}\r\n        className={cn(\r\n          'relative rounded-xl border border-primary/10 bg-main-background px-4 py-5',\r\n          className,\r\n        )}\r\n      >\r\n        <div\r\n          className={cn(\r\n            '-inset-px pointer-events-none absolute rounded-[inherit] border border-transparent [mask-clip:padding-box,border-box]',\r\n            '[mask-composite:intersect] [mask-image:linear-gradient(transparent,transparent),linear-gradient(#000,#000)]',\r\n          )}\r\n        >\r\n          <motion.div\r\n            className={cn(\r\n              'absolute aspect-square bg-gradient-to-r from-transparent via-neutral-400 to-neutral-500',\r\n              'dark:from-transparent dark:via-neutral-600 dark:to-neutral-400',\r\n            )}\r\n            animate={{\r\n              offsetDistance: ['0%', '100%'],\r\n            }}\r\n            style={{\r\n              width: 42,\r\n              offsetPath: `rect(0 auto auto 0 round ${18}px)`,\r\n            }}\r\n            transition={{\r\n              repeat: Number.POSITIVE_INFINITY,\r\n              duration: 5,\r\n              ease: 'linear',\r\n            }}\r\n          />\r\n        </div>\r\n        <span className=\"relative z-10\">\r\n          {children}\r\n        </span>\r\n      </div>\r\n    ),\r\n  },\r\n  {\r\n    variant: 'shine',\r\n    component: ({ children, className, ...props }) => (\r\n      <div\r\n        {...props}\r\n        className={cn(\r\n          'inline-flex animate-shine items-center justify-center rounded-xl border border-white/10 px-4 py-5',\r\n          'bg-[length:400%_100%] bg-[linear-gradient(110deg,#000000,45%,#303030,55%,#000000)]',\r\n          'text-sm transition-colors dark:bg-[linear-gradient(110deg,#000103,45%,#303030,55%,#000103)]',\r\n          className,\r\n        )}\r\n      >\r\n        {children}\r\n      </div>\r\n    ),\r\n  },\r\n  {\r\n    variant: 'revealed-pointer',\r\n    component: ({ children, className, ...props }) => {\r\n      const mouseX = useMotionValue(0)\r\n      const mouseY = useMotionValue(0)\r\n\r\n      return (\r\n        <div\r\n          onMouseMove={e => {\r\n            const { left, top } = e.currentTarget.getBoundingClientRect()\r\n\r\n            mouseX.set(e.clientX - left)\r\n            mouseY.set(e.clientY - top)\r\n          }}\r\n          className={cn(\r\n            'group relative overflow-hidden rounded-xl bg-border/50 p-px',\r\n          )}\r\n        >\r\n          <motion.div\r\n            className={cn(\r\n              '-inset-px pointer-events-none absolute rounded-xl opacity-0 transition duration-300 group-hover:opacity-20',\r\n              '[--color:var(--color-primary)]',\r\n            )}\r\n            style={{\r\n              background: useMotionTemplate`radial-gradient(200px circle at ${mouseX}px ${mouseY}px, var(--color), transparent 80%)`,\r\n            }}\r\n          />\r\n          <div\r\n            {...props}\r\n            className={cn(\r\n              'relative select-none rounded-xl bg-main-background px-4 py-5',\r\n              className,\r\n            )}\r\n          >\r\n            {children}\r\n          </div>\r\n        </div>\r\n      )\r\n    },\r\n  },\r\n] as const satisfies readonly Variant[]\r\n\r\nexport type CardProps = {\r\n  variant?: (typeof variants)[number]['variant']\r\n} & React.ComponentProps<'div'>\r\n\r\nexport function Card({ variant = 'default', className, ...props }: CardProps) {\r\n  const FALLBACK_INDEX = 0\r\n\r\n  const variantComponent = variants.find(v => v.variant === variant)?.component\r\n\r\n  const Component = variantComponent || variants[FALLBACK_INDEX].component\r\n\r\n  return (\r\n    <Slot.Root className=\"w-full max-w-[350px]\">\r\n      <Component {...props} className={className} />\r\n    </Slot.Root>\r\n  )\r\n}\r\n"
  }
}