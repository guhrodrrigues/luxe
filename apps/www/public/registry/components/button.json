{
  "name": "button",
  "externalDependencies": [
    "@radix-ui/react-slot"
  ],
  "internalDependencies": [],
  "file": {
    "name": "button.tsx",
    "content": "'use client' // @NOTE: Add in case you are using Next.js\r\n\r\nimport { useRef, useState } from 'react'\r\n\r\nimport { motion } from 'motion/react'\r\nimport * as Slot from '@radix-ui/react-slot'\r\n\r\nimport { cn } from '<%= it.aliases.utils %>/cn'\r\n\r\ntype Variant = {\r\n  variant: string\r\n  component: React.FC<React.ComponentProps<'button'>>\r\n}\r\n\r\nconst variants = [\r\n  {\r\n    variant: 'default',\r\n    component: ({ className, ...props }) => (\r\n      <button\r\n        {...props}\r\n        className={cn(\r\n          'relative overflow-hidden rounded-xl border border-transparent bg-neutral-900 px-4 py-2 text-neutral-200 shadow-inner transition-all duration-200',\r\n          'shadow-main-foreground/70 hover:bg-main-invert/90 dark:shadow-main-foreground/80 dark:hover:bg-main-foreground/56',\r\n          className,\r\n        )}\r\n      />\r\n    ),\r\n  },\r\n  {\r\n    variant: 'outline',\r\n    component: ({ className, ...props }) => (\r\n      <button\r\n        {...props}\r\n        className={cn(\r\n          'relative rounded-xl border border-border bg-main-background px-4 py-2 transition-all duration-200',\r\n          'text-primary-foreground hover:bg-main-foreground/40',\r\n          className,\r\n        )}\r\n      />\r\n    ),\r\n  },\r\n  {\r\n    variant: 'success',\r\n    component: ({ className, ...props }) => (\r\n      <button\r\n        {...props}\r\n        className={cn(\r\n          'rounded-xl bg-gradient-to-t from-green-700 to-green-600 px-4 py-2 text-white',\r\n          className,\r\n        )}\r\n      />\r\n    ),\r\n  },\r\n  {\r\n    variant: 'destructive',\r\n    component: ({ className, ...props }) => (\r\n      <button\r\n        {...props}\r\n        className={cn(\r\n          'rounded-xl bg-gradient-to-t from-red-600 to-red-500 px-4 py-2 text-white',\r\n          className,\r\n        )}\r\n      />\r\n    ),\r\n  },\r\n  {\r\n    variant: 'shine',\r\n    component: ({ className, ...props }) => (\r\n      <button\r\n        {...props}\r\n        className={cn(\r\n          'animate-shine items-center justify-center rounded-xl border border-border bg-[length:400%_100%]',\r\n          'px-4 py-2 text-primary-invert/90 transition-colors dark:text-primary-muted',\r\n\t\t\t\t\t\"bg-[linear-gradient(110deg,#000000,45%,#303030,55%,#000000)]\",\r\n          'dark:bg-[linear-gradient(110deg,#000103,45%,#303030,55%,#000103)]',\r\n          className,\r\n        )}\r\n      />\r\n    ),\r\n  },\r\n  {\r\n    variant: 'animated-border',\r\n    component: ({ children, className, ...props }) => (\r\n      <button\r\n        {...props}\r\n        className={cn(\r\n          'relative rounded-xl border border-primary/10 bg-main-background px-4 py-2 duration-200 hover:bg-main-foreground/40',\r\n          className,\r\n        )}\r\n      >\r\n        <div\r\n          className={cn(\r\n            '-inset-px pointer-events-none absolute rounded-[inherit] border border-transparent [mask-clip:padding-box,border-box]',\r\n            '[mask-composite:intersect] [mask-image:linear-gradient(transparent,transparent),linear-gradient(#000,#000)]',\r\n          )}\r\n        >\r\n          <motion.div\r\n            className={cn(\r\n              'absolute aspect-square bg-gradient-to-r from-transparent via-neutral-300 to-neutral-400',\r\n              'dark:from-transparent dark:via-neutral-600 dark:to-neutral-400',\r\n            )}\r\n            animate={{\r\n              offsetDistance: ['0%', '100%'],\r\n            }}\r\n            style={{\r\n              width: 20,\r\n              offsetPath: `rect(0 auto auto 0 round ${20}px)`,\r\n            }}\r\n            transition={{\r\n              repeat: Number.POSITIVE_INFINITY,\r\n              duration: 5,\r\n              ease: 'linear',\r\n            }}\r\n          />\r\n        </div>\r\n        <span className=\"relative z-10 text-primary-muted\">\r\n          {children}\r\n        </span>\r\n      </button>\r\n    ),\r\n  },\r\n  {\r\n    variant: 'rotate-border',\r\n    component: ({ children, className, ...props }) => (\r\n      <button\r\n        {...props}\r\n        className=\"relative inline-flex overflow-hidden rounded-xl p-px\"\r\n      >\r\n        <span\r\n          className={cn(\r\n            'absolute inset-[-1000%] animate-[spin_2s_linear_infinite] bg-[conic-gradient(from_90deg_at_50%_50%,#4e4e4e_0%,#d4d4d4_50%,#414141_100%)]',\r\n            'dark:bg-[conic-gradient(from_90deg_at_50%_50%,#c2c2c2_0%,#505050_50%,#bebebe_100%)]',\r\n          )}\r\n        />\r\n        <span\r\n          className={cn(\r\n            'inline-flex size-full items-center justify-center rounded-[11px] bg-main-background px-4 py-2 text-primary-foreground backdrop-blur-3xl',\r\n            className,\r\n          )}\r\n        >\r\n          {children}\r\n        </span>\r\n      </button>\r\n    ),\r\n  },\r\n  {\r\n    variant: 'glitch-brightness',\r\n    component: ({ children, className, ...props }) => {\r\n      return (\r\n        <button\r\n          {...props}\r\n          className={cn(\r\n            'group relative overflow-hidden rounded-xl px-4 py-2 text-primary-invert duration-300',\r\n            'bg-primary/80 dark:hover:bg-primary',\r\n            className,\r\n          )}\r\n        >\r\n          <TextGlitch>{children}</TextGlitch>\r\n          <Brightness />\r\n        </button>\r\n      )\r\n\r\n      function TextGlitch({ children }: { children: React.ReactNode }) {\r\n        return (\r\n          <div className=\"relative overflow-hidden\">\r\n            <span className=\"invisible\">{children}</span>\r\n            <span\r\n              className='group-hover:-translate-y-full absolute top-0 left-0 transition-transform duration-500 ease-in-out hover:duration-300'\r\n            >\r\n              {children}\r\n            </span>\r\n            <span\r\n              className='absolute top-0 left-0 translate-y-full transition-transform duration-500 ease-in-out hover:duration-300 group-hover:translate-y-0'\r\n            >\r\n              {children}\r\n            </span>\r\n          </div>\r\n        )\r\n      }\r\n\r\n      function Brightness() {\r\n        return (\r\n          <div\r\n            aria-hidden\r\n            className='absolute inset-0 flex h-full w-full animate-brightness justify-center'\r\n          >\r\n            <div className='relative h-full w-8 bg-white/20 blur dark:bg-white/40' />\r\n          </div>\r\n        )\r\n      }\r\n    },\r\n  },\r\n] as const satisfies readonly Variant[]\r\n\r\nexport type ButtonProps = {\r\n  variant?: (typeof variants)[number]['variant']\r\n  isMagnetic?: boolean\r\n} & React.ComponentProps<'button'>\r\n\r\nexport function Button({\r\n  variant = 'default',\r\n  isMagnetic = false,\r\n  className,\r\n  ...props\r\n}: ButtonProps) {\r\n  const FALLBACK_INDEX = 0\r\n  \r\n  const variantComponent = variants.find(v => v.variant === variant)?.component\r\n\r\n  const Component = variantComponent || variants[FALLBACK_INDEX].component\r\n\r\n  const buttonContent = (\r\n    <Slot.Root className={cn('font-medium text-sm')}>\r\n      <Component {...props} className={className} />\r\n    </Slot.Root>\r\n  )\r\n\r\n  if (isMagnetic) {\r\n    return (\r\n      <Magnetic>\r\n        {buttonContent}\r\n      </Magnetic>\r\n    )\r\n  }\r\n\r\n  return buttonContent\r\n}\r\n\r\nfunction Magnetic({ children }: { children: React.ReactNode }) {\r\n  const { ref, handleMouseMove, handleMouseLeave, x, y } = useMagnetic()\r\n\r\n  return (\r\n    <motion.div \r\n      ref={ref} \r\n      onMouseMove={handleMouseMove} \r\n      onMouseLeave={handleMouseLeave} \r\n      animate={{ x, y }}\r\n      transition={{\r\n        type: 'spring',\r\n        damping: 15,\r\n        stiffness: 150,\r\n        mass: 0.1,\r\n      }}\r\n    >\r\n      {children}\r\n    </motion.div>\r\n  )\r\n}\r\n\r\nfunction useMagnetic() {\r\n  const [position, setPosition] = useState({ x: 0, y: 0 })\r\n  const ref = useRef<HTMLDivElement>(null)\r\n\r\n  function handleMouseMove(e: React.MouseEvent) {\r\n    const { clientX, clientY } = e\r\n    const { height, width, left, top } = ref.current!.getBoundingClientRect()\r\n\r\n    const middleX = clientX - (left + width / 2)\r\n    const middleY = clientY - (top + height / 2)\r\n\r\n    setPosition({ x: middleX, y: middleY })\r\n  }\r\n\r\n  function handleMouseLeave() {\r\n    setPosition({ x: 0, y: 0 })\r\n  }\r\n\r\n  const { x, y } = position\r\n\r\n  return { ref, handleMouseMove, handleMouseLeave, x, y }\r\n}\r\n"
  }
}