{
  "name": "button",
  "type": "ui:components",
  "externalDependencies": [
    "@radix-ui/react-slot"
  ],
  "internalDependencies": [],
  "files": [
    {
      "name": "button.tsx",
      "content": "'use client' // @NOTE: Add in case you are using Next.js\n\nimport { useRef, useState } from 'react'\n\nimport { motion } from 'motion/react'\nimport * as Slot from '@radix-ui/react-slot'\n\nimport { cn } from '@/utils/cn'\n\ntype Variant = {\n  variant: string\n  component: React.FC<React.ComponentProps<'button'>>\n}\n\nconst variants: readonly Variant[] = [\n  {\n    variant: 'default',\n    component: ({ className, ...props }) => (\n      <button\n        {...props}\n        className={cn(\n          'group relative w-fit overflow-hidden rounded-xl border border-transparent px-4 py-2 text-neutral-200',\n          'bg-[#161616] shadow-inner shadow-neutral-400',\n          'shadow-neutral-400 hover:bg-neutral-900/90',\n          'dark:shadow-neutral-800/80 dark:hover:bg-neutral-800/50',\n          'transition-all duration-200',\n          className,\n        )}\n      />\n    ),\n  },\n  {\n    variant: 'outline',\n    component: ({ className, ...props }) => (\n      <button\n        {...props}\n        className={cn(\n          'group relative rounded-xl border border-neutral-300 px-4 py-2 text-neutral-700 transition-all duration-200',\n          'hover:bg-neutral-200 dark:border-neutral-800 dark:text-neutral-200 dark:hover:bg-neutral-900',\n          className,\n        )}\n      />\n    ),\n  },\n  {\n    variant: 'success',\n    component: ({ className, ...props }) => (\n      <button\n        {...props}\n        className={cn(\n          'rounded-xl bg-gradient-to-t from-green-700 to-green-600 px-4 py-2 text-white',\n          className,\n        )}\n      />\n    ),\n  },\n  {\n    variant: 'destructive',\n    component: ({ className, ...props }) => (\n      <button\n        {...props}\n        className={cn(\n          'rounded-xl bg-gradient-to-t from-red-600 to-red-500 px-4 py-2 text-white',\n          className,\n        )}\n      />\n    ),\n  },\n  {\n    variant: 'shine',\n    component: ({ className, ...props }) => (\n      <button\n        {...props}\n        className={cn(\n          'animate-shine items-center justify-center rounded-xl border border-white/10 bg-[linear-gradient(110deg,#000000,45%,#303030,55%,#000000)] px-4 py-2',\n          'bg-[length:400%_100%] text-neutral-200 transition-colors dark:border-neutral-800',\n          'dark:bg-[linear-gradient(110deg,#000103,45%,#303030,55%,#000103)] dark:text-neutral-400',\n          className,\n        )}\n      />\n    ),\n  },\n  {\n    variant: 'animated-border',\n    component: ({ children, className, ...props }) => (\n      <button\n        {...props}\n        className={cn(\n          'relative rounded-xl border border-black/10 px-4 py-2 duration-200',\n          'hover:bg-neutral-200 dark:border-white/10 dark:hover:bg-neutral-900',\n          className,\n        )}\n      >\n        <div\n          className={cn(\n            '-inset-px pointer-events-none absolute rounded-[inherit] border border-transparent [mask-clip:padding-box,border-box]',\n            '[mask-composite:intersect] [mask-image:linear-gradient(transparent,transparent),linear-gradient(#000,#000)]',\n          )}\n        >\n          <motion.div\n            className={cn(\n              'absolute aspect-square bg-gradient-to-r from-transparent via-neutral-300 to-neutral-400',\n              'dark:from-transparent dark:via-neutral-600 dark:to-neutral-400',\n            )}\n            animate={{\n              offsetDistance: ['0%', '100%'],\n            }}\n            style={{\n              width: 18,\n              offsetPath: `rect(0 auto auto 0 round ${18}px)`,\n            }}\n            transition={{\n              repeat: Number.POSITIVE_INFINITY,\n              duration: 5,\n              ease: 'linear',\n            }}\n          />\n        </div>\n        <span className=\"relative z-10 text-neutral-500 dark:text-neutral-400\">\n          {children}\n        </span>\n      </button>\n    ),\n  },\n  {\n    variant: 'rotate-border',\n    component: ({ children, className, ...props }) => (\n      <button\n        {...props}\n        className=\"relative inline-flex overflow-hidden rounded-xl p-px\"\n      >\n        <span\n          className={cn(\n            'absolute inset-[-1000%] animate-[spin_2s_linear_infinite] bg-[conic-gradient(from_90deg_at_50%_50%,#4e4e4e_0%,#d4d4d4_50%,#414141_100%)]',\n            'dark:bg-[conic-gradient(from_90deg_at_50%_50%,#c2c2c2_0%,#505050_50%,#bebebe_100%)]',\n          )}\n        />\n        <span\n          className={cn(\n            'inline-flex size-full items-center justify-center rounded-xl bg-neutral-100 px-4 py-2 text-neutral-500 backdrop-blur-3xl',\n            'dark:bg-neutral-950 dark:text-neutral-100',\n            className,\n          )}\n        >\n          {children}\n        </span>\n      </button>\n    ),\n  },\n  {\n    variant: 'magnetic',\n    component: ({ children, ...props }) => {\n      const { ref, handleMouseLeave, handleMouseMove, x, y } = useMagnetic()\n\n      return (\n        <motion.button\n          ref={ref}\n          className={cn(\n            'relative rounded-xl bg-black px-4 py-2 text-white dark:bg-white dark:text-black',\n            props.className,\n          )}\n          onMouseMove={handleMouseMove}\n          onMouseLeave={handleMouseLeave}\n          animate={{ x, y }}\n          transition={{\n            type: 'spring',\n            damping: 15,\n            stiffness: 150,\n            mass: 0.1,\n          }}\n        >\n          {children}\n        </motion.button>\n      )\n    },\n  },\n  {\n    variant: 'glitch-brightness',\n    component: ({ children, className, ...props }) => {\n      return (\n        <button\n          {...props}\n          className={cn(\n            'group relative overflow-hidden rounded-xl bg-black/80 px-4 py-2 text-white duration-300',\n            'hover:bg-black dark:bg-white/80 dark:text-black dark:hover:bg-white',\n            className,\n          )}\n        >\n          <TextGlitch>{children}</TextGlitch>\n          <Brightness />\n        </button>\n      )\n\n      function TextGlitch({ children }: { children: React.ReactNode }) {\n        return (\n          <div className=\"relative overflow-hidden\">\n            <span className=\"invisible\">{children}</span>\n            <span\n              className={cn(\n                'group-hover:-translate-y-full absolute top-0 left-0 transition-transform duration-500 ease-in-out hover:duration-300',\n                'hover:duration-300',\n              )}\n            >\n              {children}\n            </span>\n            <span\n              className={cn(\n                'absolute top-0 left-0 translate-y-full transition-transform duration-500 ease-in-out hover:duration-300 group-hover:translate-y-0',\n              )}\n            >\n              {children}\n            </span>\n          </div>\n        )\n      }\n\n      function Brightness() {\n        return (\n          <div\n            aria-hidden\n            className={cn(\n              'absolute inset-0 flex h-full w-full animate-brightness justify-center',\n            )}\n          >\n            <div\n              className={cn(\n                'relative h-full w-8 bg-white/20 blur dark:bg-white/40',\n              )}\n            />\n          </div>\n        )\n      }\n    },\n  },\n] as const\n\nexport type ButtonProps = {\n  variant?: (typeof variants)[number]['variant']\n} & React.ComponentProps<'button'>\n\nexport function Button({\n  variant = 'default',\n  className,\n  ...props\n}: ButtonProps) {\n  const FALLBACK_INDEX = 0\n\n  const variantComponent = variants.find(v => v.variant === variant)?.component\n\n  if (!variantComponent) {\n    return variants[FALLBACK_INDEX].component(props)\n  }\n\n  return (\n    <Slot.Root className={cn('font-medium text-sm')}>\n      {variantComponent\n        ? variantComponent({ ...props, className })\n        : variants[FALLBACK_INDEX].component({ ...props, className })}\n    </Slot.Root>\n  )\n}\n\n// HOOKS â†´\n\nfunction useMagnetic() {\n  const [position, setPosition] = useState({ x: 0, y: 0 })\n  const ref = useRef<HTMLButtonElement>(null)\n\n  function handleMouseMove(e: React.MouseEvent) {\n    const { clientX, clientY } = e\n    const { height, width, left, top } = ref.current!.getBoundingClientRect()\n\n    const middleX = clientX - (left + width / 2)\n    const middleY = clientY - (top + height / 2)\n\n    setPosition({ x: middleX, y: middleY })\n  }\n\n  function handleMouseLeave() {\n    setPosition({ x: 0, y: 0 })\n  }\n\n  const { x, y } = position\n\n  return { ref, handleMouseMove, handleMouseLeave, x, y }\n}\n"
    }
  ]
}