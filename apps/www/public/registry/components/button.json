{
  "name": "button",
  "externalDependencies": [
    "@radix-ui/react-slot"
  ],
  "internalDependencies": [],
  "file": {
    "name": "button.tsx",
    "content": "'use client' // @NOTE: Add in case you are using Next.js\n\nimport { useRef, useState } from 'react'\n\nimport { motion } from 'motion/react'\nimport * as Slot from '@radix-ui/react-slot'\n\nimport { cn } from '<%= it.aliases.utils %>/cn'\n\ntype Variant = {\n  variant: string\n  component: React.FC<React.ComponentProps<'button'>>\n}\n\nconst variants: readonly Variant[] = [\n  {\n    variant: 'default',\n    component: ({ className, ...props }) => (\n      <button\n        {...props}\n        className={cn(\n          'relative overflow-hidden rounded-xl border border-transparent bg-neutral-900 px-4 py-2 text-neutral-200 shadow-inner transition-all duration-200',\n          'shadow-main-foreground/70 hover:bg-main-invert/90 dark:shadow-main-foreground/80 dark:hover:bg-main-foreground/56',\n          className,\n        )}\n      />\n    ),\n  },\n  {\n    variant: 'outline',\n    component: ({ className, ...props }) => (\n      <button\n        {...props}\n        className={cn(\n          'relative rounded-xl border border-border px-4 py-2 transition-all duration-200',\n          'text-primary-foreground hover:bg-main-foreground/40',\n          className,\n        )}\n      />\n    ),\n  },\n  {\n    variant: 'success',\n    component: ({ className, ...props }) => (\n      <button\n        {...props}\n        className={cn(\n          'rounded-xl bg-gradient-to-t from-green-700 to-green-600 px-4 py-2 text-white',\n          className,\n        )}\n      />\n    ),\n  },\n  {\n    variant: 'destructive',\n    component: ({ className, ...props }) => (\n      <button\n        {...props}\n        className={cn(\n          'rounded-xl bg-gradient-to-t from-red-600 to-red-500 px-4 py-2 text-white',\n          className,\n        )}\n      />\n    ),\n  },\n  {\n    variant: 'shine',\n    component: ({ className, ...props }) => (\n      <button\n        {...props}\n        className={cn(\n          'animate-shine items-center justify-center rounded-xl border border-border bg-[length:400%_100%]',\n          'px-4 py-2 text-primary-invert/90 transition-colors dark:text-primary-muted',\n\t\t\t\t\t\"bg-[linear-gradient(110deg,#000000,45%,#303030,55%,#000000)]\",\n          'dark:bg-[linear-gradient(110deg,#000103,45%,#303030,55%,#000103)]',\n          className,\n        )}\n      />\n    ),\n  },\n  {\n    variant: 'animated-border',\n    component: ({ children, className, ...props }) => (\n      <button\n        {...props}\n        className={cn(\n          'relative rounded-xl border border-primary/10 px-4 py-2 duration-200 hover:bg-main-foreground/40',\n          className,\n        )}\n      >\n        <div\n          className={cn(\n            '-inset-px pointer-events-none absolute rounded-[inherit] border border-transparent [mask-clip:padding-box,border-box]',\n            '[mask-composite:intersect] [mask-image:linear-gradient(transparent,transparent),linear-gradient(#000,#000)]',\n          )}\n        >\n          <motion.div\n            className={cn(\n              'absolute aspect-square bg-gradient-to-r from-transparent via-neutral-300 to-neutral-400',\n              'dark:from-transparent dark:via-neutral-600 dark:to-neutral-400',\n            )}\n            animate={{\n              offsetDistance: ['0%', '100%'],\n            }}\n            style={{\n              width: 20,\n              offsetPath: `rect(0 auto auto 0 round ${20}px)`,\n            }}\n            transition={{\n              repeat: Number.POSITIVE_INFINITY,\n              duration: 5,\n              ease: 'linear',\n            }}\n          />\n        </div>\n        <span className=\"relative z-10 text-primary-muted\">\n          {children}\n        </span>\n      </button>\n    ),\n  },\n  {\n    variant: 'rotate-border',\n    component: ({ children, className, ...props }) => (\n      <button\n        {...props}\n        className=\"relative inline-flex overflow-hidden rounded-xl p-px\"\n      >\n        <span\n          className={cn(\n            'absolute inset-[-1000%] animate-[spin_2s_linear_infinite] bg-[conic-gradient(from_90deg_at_50%_50%,#4e4e4e_0%,#d4d4d4_50%,#414141_100%)]',\n            'dark:bg-[conic-gradient(from_90deg_at_50%_50%,#c2c2c2_0%,#505050_50%,#bebebe_100%)]',\n          )}\n        />\n        <span\n          className={cn(\n            'inline-flex size-full items-center justify-center rounded-[11px] bg-main-background px-4 py-2 text-primary-foreground backdrop-blur-3xl',\n            className,\n          )}\n        >\n          {children}\n        </span>\n      </button>\n    ),\n  },\n  {\n    variant: 'glitch-brightness',\n    component: ({ children, className, ...props }) => {\n      return (\n        <button\n          {...props}\n          className={cn(\n            'group relative overflow-hidden rounded-xl px-4 py-2 text-primary-invert duration-300',\n            'bg-primary/80 dark:hover:bg-primary',\n            className,\n          )}\n        >\n          <TextGlitch>{children}</TextGlitch>\n          <Brightness />\n        </button>\n      )\n\n      function TextGlitch({ children }: { children: React.ReactNode }) {\n        return (\n          <div className=\"relative overflow-hidden\">\n            <span className=\"invisible\">{children}</span>\n            <span\n              className='group-hover:-translate-y-full absolute top-0 left-0 transition-transform duration-500 ease-in-out hover:duration-300'\n            >\n              {children}\n            </span>\n            <span\n              className='absolute top-0 left-0 translate-y-full transition-transform duration-500 ease-in-out hover:duration-300 group-hover:translate-y-0'\n            >\n              {children}\n            </span>\n          </div>\n        )\n      }\n\n      function Brightness() {\n        return (\n          <div\n            aria-hidden\n            className='absolute inset-0 flex h-full w-full animate-brightness justify-center'\n          >\n            <div className='relative h-full w-8 bg-white/20 blur dark:bg-white/40' />\n          </div>\n        )\n      }\n    },\n  },\n] as const\n\nexport type ButtonProps = {\n  variant?: (typeof variants)[number]['variant']\n  isMagnetic?: boolean\n} & React.ComponentProps<'button'>\n\nexport function Button({\n  variant = 'default',\n  isMagnetic = false,\n  className,\n  ...props\n}: ButtonProps) {\n\tconst FALLBACK_INDEX = 0\n  \n  const variantComponent = variants.find(v => v.variant === variant)?.component\n\n  if (!variantComponent) {\n    return variants[FALLBACK_INDEX].component(props)\n  }\n\n  const buttonContent = (\n    <Slot.Root className={cn('font-medium text-sm')}>\n      {variantComponent\n        ? variantComponent({ ...props, className })\n        : variants[FALLBACK_INDEX].component({ ...props, className })}\n    </Slot.Root>\n  )\n\n  if (isMagnetic) {\n    return (\n      <Magnetic>\n        {buttonContent}\n      </Magnetic>\n    )\n  }\n\n  return buttonContent\n}\n\nfunction Magnetic({ children }: { children: React.ReactNode }) {\n  const { ref, handleMouseMove, handleMouseLeave, x, y } = useMagnetic()\n\n  return (\n    <motion.div \n\t\t\tref={ref} \n\t\t\tonMouseMove={handleMouseMove} \n\t\t\tonMouseLeave={handleMouseLeave} \n\t\t\tanimate={{ x, y }}\n\t\t\ttransition={{\n\t\t\t\ttype: 'spring',\n\t\t\t\tdamping: 15,\n\t\t\t\tstiffness: 150,\n\t\t\t\tmass: 0.1,\n\t\t\t}}\n\t\t>\n      {children}\n    </motion.div>\n  )\n}\n\nfunction useMagnetic() {\n  const [position, setPosition] = useState({ x: 0, y: 0 })\n  const ref = useRef<HTMLDivElement>(null)\n\n  function handleMouseMove(e: React.MouseEvent) {\n    const { clientX, clientY } = e\n    const { height, width, left, top } = ref.current!.getBoundingClientRect()\n\n    const middleX = clientX - (left + width / 2)\n    const middleY = clientY - (top + height / 2)\n\n    setPosition({ x: middleX, y: middleY })\n  }\n\n  function handleMouseLeave() {\n    setPosition({ x: 0, y: 0 })\n  }\n\n  const { x, y } = position\n\n  return { ref, handleMouseMove, handleMouseLeave, x, y }\n}\n"
  }
}