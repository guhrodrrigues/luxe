{
  "name": "multi-step-modal",
  "externalDependencies": [
    "@radix-ui/react-dialog",
    "react-use-measure"
  ],
  "internalDependencies": [],
  "file": {
    "name": "multi-step-modal.tsx",
    "content": "'use client' // @NOTE: Add in case you are using Next.js\n\nimport { useState } from 'react'\n\nimport * as RadixDialog from '@radix-ui/react-dialog'\nimport {\n  AnimatePresence,\n  motion,\n  type Variants,\n  MotionConfig,\n} from 'motion/react'\n\nimport useMeasure from 'react-use-measure'\n\nimport { cn } from '<%= it.aliases.utils %>/cn'\n\nexport const MultiStepModal = RadixDialog.Root\nexport const MultiStepModalTrigger = RadixDialog.Trigger\nexport const MultiStepModalClose = RadixDialog.Close\n\ntype MultiStepModalSteps = {\n  title: string\n  description: string\n}\n\ntype MultiStepModalContentProps = React.CustomComponentPropsWithRef<\n  typeof RadixDialog.Content\n> & {\n  steps: MultiStepModalSteps[]\n}\n\nexport function MultiStepModalContent({\n  steps,\n  ...props\n}: MultiStepModalContentProps) {\n  const TOTAL_STEPS = steps.length\n  const MIN_STEP = 0\n\n  const [activeContentIndex, setActiveContentIndex] = useState(MIN_STEP)\n  const [direction, setDirection] = useState<number>(1)\n\n  const [ref, { height: heightContent }] = useMeasure()\n\n  const { title, description } = steps[activeContentIndex]\n\n  function handleControlsNavigation(control: 'previous' | 'next') {\n    const newDirection = control === 'next' ? 1 : -1\n    setDirection(newDirection)\n\n    setActiveContentIndex(prev => {\n      const nextIndex = prev + newDirection\n      return Math.min(TOTAL_STEPS - 1, Math.max(MIN_STEP, nextIndex))\n    })\n  }\n\n  const slideMotionVariants: Variants = {\n    initial: (dir: number) => {\n      return {\n        x: `${110 * dir}%`,\n        opacity: 0,\n        height: heightContent > 0 ? heightContent : 'auto',\n      }\n    },\n    active: {\n      x: '0%',\n      opacity: 1,\n      height: heightContent > 0 ? heightContent : 'auto',\n    },\n    exit: (dir: number) => {\n      return {\n        x: `${-110 * dir}%`,\n        opacity: 0,\n      }\n    },\n  }\n\n  return (\n    <MotionConfig transition={{ type: 'spring', duration: 0.6, bounce: 0 }}>\n      <RadixDialog.Portal>\n        <RadixDialog.Overlay\n          className={cn(\n            'fixed inset-0 bg-black/80 ease-out z-[999]',\n            'motion-safe:data-[state=open]:fade-in motion-safe:data-[state=open]:animate-in',\n            'motion-safe:data-[state=closed]:fade-out motion-safe:data-[state=closed]:animate-out',\n          )}\n        />\n        <RadixDialog.Content\n          {...props}\n          className={cn(\n            'max-w-96 overflow-hidden rounded-xl border border-border bg-main focus:outline-none',\n            '-translate-x-1/2 fixed top-1/3 left-1/2 motion-safe:ease-out z-[1001]',\n            'motion-safe:data-[state=open]:fade-in motion-safe:data-[state=open]:zoom-in-95 motion-safe:data-[state=open]:animate-in',\n            'motion-safe:data-[state=closed]:fade-out motion-safe:data-[state=open]:zoom-out-95 motion-safe:data-[state=closed]:animate-out',\n          )}\n        >\n          <div className=\"px-4 pt-4 pb-3\">\n            <AnimatePresence\n              initial={false}\n              mode=\"popLayout\"\n              custom={direction}\n            >\n              <motion.div\n                key={activeContentIndex}\n                variants={slideMotionVariants}\n                initial=\"initial\"\n                animate=\"active\"\n                exit=\"exit\"\n                custom={direction}\n              >\n                <div ref={ref}>\n                  <RadixDialog.Title className=\"mb-2 font-medium text-base text-primary-foreground\">\n                    {title}\n                  </RadixDialog.Title>\n                  <RadixDialog.Description className=\"font-normal text-primary-muted text-sm/5.5\">\n                    {description}\n                  </RadixDialog.Description>\n                </div>\n              </motion.div>\n            </AnimatePresence>\n          </div>\n          <footer\n            className={cn(\n              'mt-2 flex items-center justify-between border-border border-t px-4 py-2',\n              'bg-main-muted *:rounded-full *:border *:border-border *:bg-main-secondary *:text-primary',\n              '*:h-8 *:w-24 *:px-3 *:font-medium *:text-[13px]/5.5',\n              '*:disabled:cursor-not-allowed *:disabled:opacity-50',\n            )}\n          >\n            <button\n              type=\"button\"\n              onClick={() => handleControlsNavigation('previous')}\n              disabled={activeContentIndex === MIN_STEP}\n            >\n              Back\n            </button>\n            <button\n              type=\"button\"\n              onClick={() => handleControlsNavigation('next')}\n              disabled={activeContentIndex === TOTAL_STEPS - 1}\n            >\n              Continue\n            </button>\n          </footer>\n        </RadixDialog.Content>\n      </RadixDialog.Portal>\n    </MotionConfig>\n  )\n}"
  }
}