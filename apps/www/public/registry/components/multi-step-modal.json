{
  "name": "multi-step-modal",
  "type": "ui:components",
  "externalDependencies": [
    "react-use-measure"
  ],
  "internalDependencies": [],
  "files": [
    {
      "name": "multi-step-modal.tsx",
      "content": "\"use client\";\n\nimport { useCallback, useState } from \"react\";\n\nimport { AnimatePresence, type Variants, motion } from \"motion/react\";\nimport useMeasure from \"react-use-measure\";\n\nimport { cn } from '<%= it.aliases.utils %>/cn';\n\nconst STEPS = [\n  {\n    title: \"Luxe\",\n    description:\n      \"A library of components ready for you to copy and paste, designed to illuminate your apps with elegance, sophistication and a unique touch of style.\",\n  },\n  {\n    title: \"How to use?\",\n    description:\n      \"Simply click on a component, copy the code and paste it into your project. This will give your app an extra shine.\",\n  },\n  {\n    title: \"Results\",\n    description:\n      \"Luxe will add extra shine to your application, with smooth components.\",\n  },\n  {\n    title: \"Copy now\",\n    description:\n      \"Elevate your project with sophisticated, ready to use components. Illuminate up your app quickly, easily and effortlessly!\",\n  },\n];\n\nexport function MultiStepModal() {\n  const [activeIdx, setActiveIdx] = useState(0);\n  const [direction, setDirection] = useState(1);\n  const [ref, { height: heightContent }] = useMeasure();\n\n  const handleSetActiveIdx = useCallback(\n    (idx: number) => {\n      if (activeIdx < 0) setActiveIdx(0);\n      if (activeIdx >= STEPS.length) setActiveIdx(STEPS.length - 1);\n\n      const direction = idx > activeIdx ? 1 : -1;\n      setDirection(direction);\n      setActiveIdx(idx);\n    },\n    [activeIdx],\n  );\n\n  const variants: Variants = {\n    initial: (direction: number) => ({\n      opacity: 0,\n      height: heightContent > 0 ? heightContent : \"auto\",\n      position: \"absolute\",\n      x: direction > 0 ? 370 : -370,\n    }),\n    animate: {\n      opacity: 1,\n      height: heightContent > 0 ? heightContent : \"auto\",\n      position: \"relative\",\n      x: 0,\n      zIndex: 1,\n    },\n    exit: (direction: number) => ({\n      zIndex: 0,\n      opacity: 0,\n      x: direction < 0 ? 370 : -370,\n      top: 0,\n      width: \"100%\",\n    }),\n  };\n\n  return (\n    <div className=\"w-[370px] overflow-hidden rounded-xl border border-[#dddddd] bg-neutral-100 dark:border-[#222222] dark:bg-[#111111]\">\n      <div className=\"relative\">\n        <AnimatePresence initial={false} mode=\"popLayout\" custom={direction}>\n          <motion.div\n            key={activeIdx}\n            custom={direction}\n            variants={variants}\n            initial=\"initial\"\n            animate=\"animate\"\n            exit=\"exit\"\n            transition={{\n              x: { type: \"spring\", stiffness: 300, damping: 30 },\n              opacity: { duration: 0.2 },\n            }}\n          >\n            <div ref={ref} className=\"px-4 py-5\">\n              <h3 className=\"mb-2 font-medium text-neutral-700 dark:text-neutral-100\">\n                {STEPS[activeIdx].title}\n              </h3>\n              <p className=\"text-[15px] text-neutral-500 dark:text-neutral-400\">\n                {STEPS[activeIdx].description}\n              </p>\n            </div>\n          </motion.div>\n        </AnimatePresence>\n        <div className=\"relative z-10 border-t border-[#dddddd] bg-neutral-100 dark:border-[#222222] dark:bg-[#0f0f0f]\">\n          <div className=\"flex items-center justify-between px-4 py-2\">\n            <button\n              disabled={activeIdx === 0}\n              onClick={() => handleSetActiveIdx(activeIdx - 1)}\n              className={cn(\n                \"h-8 w-24 rounded-full border border-neutral-300 bg-neutral-100 px-3 text-[13px] font-medium text-black dark:text-white\",\n                \"disabled:cursor-not-allowed disabled:opacity-50 dark:border-neutral-800 dark:bg-[#171717]\",\n              )}\n            >\n              Back\n            </button>\n            <button\n              disabled={activeIdx === STEPS.length - 1}\n              onClick={() => {\n                if (activeIdx === STEPS.length - 1) return;\n\n                handleSetActiveIdx(activeIdx + 1);\n              }}\n              className={cn(\n                \"h-8 w-24 rounded-full border border-neutral-300 bg-neutral-100 px-3 text-[13px] font-medium text-black dark:text-white\",\n                \"disabled:cursor-not-allowed disabled:opacity-50 dark:border-neutral-800 dark:bg-[#171717]\",\n              )}\n            >\n              Continue\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n"
    }
  ]
}