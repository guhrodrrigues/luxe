{
  "name": "dropdown-menu",
  "externalDependencies": [
    "@radix-ui/react-slot"
  ],
  "internalDependencies": [],
  "file": {
    "name": "dropdown-menu.tsx",
    "content": "'use client' // @NOTE: Add in case you are using Next.js\n\nimport { useState, createContext, useContext } from 'react'\n\nimport { motion, type Variants } from 'motion/react'\n\nimport { cn } from '<%= it.aliases.utils %>/cn'\n\nimport { Slot } from '@radix-ui/react-slot'\n\nconst content: Variants = {\n  hidden: {\n    clipPath: 'inset(10% 50% 90% 50% round 12px)',\n  },\n  show: {\n    clipPath: 'inset(0% 0% 0% 0% round 12px)',\n    transition: {\n      type: 'spring',\n      bounce: 0,\n      duration: 0.5,\n      delayChildren: 0.15,\n      staggerChildren: 0.1,\n    },\n  },\n}\n\nconst item: Variants = {\n  hidden: {\n    opacity: 0,\n    scale: 0.3,\n    filter: 'blur(20px)',\n  },\n  show: {\n    opacity: 1,\n    scale: 1,\n    filter: 'blur(0px)',\n  },\n}\n\ntype DropdownMenuProps = React.ComponentProps<'nav'>\n\nexport function DropdownMenu({\n  className,\n  children,\n  ...props\n}: DropdownMenuProps) {\n  return (\n    <DropdownMenuProvider>\n      <nav\n        className={cn('mx-auto w-full max-w-[200px] space-y-2', className)}\n        {...props}\n      >\n        {children}\n      </nav>\n    </DropdownMenuProvider>\n  )\n}\n\ntype DropdownMenuTriggerProps = {\n  asChild?: boolean\n} & React.ComponentProps<'button'>\n\nexport function DrodpownMenuTrigger({\n  asChild = false,\n  children,\n  className,\n  ...props\n}: DropdownMenuTriggerProps) {\n  const { isOpen, setIsOpen } = useDropdownMenu()\n\n  const Comp = asChild ? Slot : 'button'\n\n  return (\n    <Comp\n      className={cn(\n        'flex w-full max-w-[300px] items-center justify-between rounded-xl border border-border bg-main-secondary px-3.5 py-2.5 ease-out active:scale-[0.97]',\n        'focus-visible:border-border focus-visible:outline-none',\n      )}\n      onClick={() => setIsOpen(prev => !prev)}\n      {...props}\n    >\n      {children}\n      <svg\n        width=\"15\"\n        height=\"15\"\n        viewBox=\"0 0 24 24\"\n        className={cn(\n          'text-neutral-400 duration-300 ease-out',\n          isOpen && 'rotate-180',\n        )}\n        fill=\"none\"\n        stroke=\"currentColor\"\n        strokeWidth=\"2\"\n        strokeLinecap=\"round\"\n        strokeLinejoin=\"round\"\n      >\n        <title>Chevron</title>\n        <path d=\"M12.22 2h-.44a2 2 0 0 0-2 2v.18a2 2 0 0 1-1 1.73l-.43.25a2 2 0 0 1-2 0l-.15-.08a2 2 0 0 0-2.73.73l-.22.38a2 2 0 0 0 .73 2.73l.15.1a2 2 0 0 1 1 1.72v.51a2 2 0 0 1-1 1.74l-.15.09a2 2 0 0 0-.73 2.73l.22.38a2 2 0 0 0 2.73.73l.15-.08a2 2 0 0 1 2 0l.43.25a2 2 0 0 1 1 1.73V20a2 2 0 0 0 2 2h.44a2 2 0 0 0 2-2v-.18a2 2 0 0 1 1-1.73l.43-.25a2 2 0 0 1 2 0l.15.08a2 2 0 0 0 2.73-.73l.22-.39a2 2 0 0 0-.73-2.73l-.15-.08a2 2 0 0 1-1-1.74v-.5a2 2 0 0 1 1-1.74l.15-.09a2 2 0 0 0 .73-2.73l-.22-.38a2 2 0 0 0-2.73-.73l-.15.08a2 2 0 0 1-2 0l-.43-.25a2 2 0 0 1-1-1.73V4a2 2 0 0 0-2-2z\" />\n        <circle cx=\"12\" cy=\"12\" r=\"3\" />\n      </svg>\n    </Comp>\n  )\n}\n\ntype DropdownMenuContentProps = {\n  floating?: boolean\n} & React.ComponentProps<typeof motion.ul>\n\nexport function DropdownMenuContent({\n  children,\n  floating = false,\n  className,\n  ...props\n}: DropdownMenuContentProps) {\n  const { isOpen } = useDropdownMenu()\n\n  return (\n    <motion.ul\n      className={cn(\n        'z-[1] mx-auto flex w-full max-w-[200px] flex-col gap-1.5 rounded-xl px-1.5 py-2.5',\n        'border border-border bg-main-secondary',\n        isOpen ? 'pointer-events-auto' : 'pointer-events-none',\n        floating ? 'absolute' : 'relative',\n        className,\n      )}\n      variants={content}\n      initial=\"hidden\"\n      animate={isOpen ? 'show' : 'hidden'}\n      exit=\"hidden\"\n      transition={{ duration: 0.2 }}\n      {...props}\n    >\n      {children}\n    </motion.ul>\n  )\n}\n\ntype DropdownMenuItemProps = {\n  asChild?: boolean\n} & React.ComponentProps<'button'>\n\nexport function DropdownMenuItem({\n  asChild = false,\n  children,\n  className,\n  ...props\n}: DropdownMenuItemProps) {\n  const Comp = asChild ? Slot : 'button'\n\n  return (\n    <motion.li variants={item} transition={{ duration: 0.2 }}>\n      <Comp\n        className={cn(\n          'flex w-full items-center gap-2 rounded-lg border border-transparent py-1 text-primary-muted transition-colors',\n          'hover:text-primary-foreground focus-visible:border-border focus-visible:text-primary-foreground focus-visible:outline-none',\n          'select-none px-1.5 hover:bg-main-foreground/60 focus-visible:bg-main-foreground/60',\n          className,\n        )}\n        {...props}\n      >\n        {children}\n      </Comp>\n    </motion.li>\n  )\n}\n\nconst Context = createContext(\n  {} as {\n    isOpen: boolean\n    setIsOpen: React.Dispatch<React.SetStateAction<boolean>>\n  },\n)\n\nfunction DropdownMenuProvider({ children }: { children: React.ReactNode }) {\n  const [isOpen, setIsOpen] = useState(false)\n\n  const value = { isOpen, setIsOpen }\n\n  return <Context.Provider value={value}>{children}</Context.Provider>\n}\n\nfunction useDropdownMenu() {\n  const { isOpen, setIsOpen } = useContext(Context)\n\n  return { isOpen, setIsOpen }\n}\n"
  }
}