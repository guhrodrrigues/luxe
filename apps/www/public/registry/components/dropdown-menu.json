{
  "name": "dropdown-menu",
  "externalDependencies": [
    "@radix-ui/react-slot"
  ],
  "internalDependencies": [],
  "file": {
    "name": "dropdown-menu.tsx",
    "content": "'use client' // @NOTE: Add in case you are using Next.js\r\n\r\nimport { useState, createContext, useContext } from 'react'\r\n\r\nimport { motion, type Variants } from 'motion/react'\r\n\r\nimport { cn } from '<%= it.aliases.utils %>/cn'\r\n\r\nimport { Slot } from '@radix-ui/react-slot'\r\n\r\nconst content: Variants = {\r\n  hidden: {\r\n    clipPath: 'inset(10% 50% 90% 50% round 12px)',\r\n  },\r\n  show: {\r\n    clipPath: 'inset(0% 0% 0% 0% round 12px)',\r\n    transition: {\r\n      type: 'spring',\r\n      bounce: 0,\r\n      duration: 0.5,\r\n      delayChildren: 0.15,\r\n      staggerChildren: 0.1,\r\n    },\r\n  },\r\n}\r\n\r\nconst item: Variants = {\r\n  hidden: {\r\n    opacity: 0,\r\n    scale: 0.3,\r\n    filter: 'blur(20px)',\r\n  },\r\n  show: {\r\n    opacity: 1,\r\n    scale: 1,\r\n    filter: 'blur(0px)',\r\n  },\r\n}\r\n\r\ntype DropdownMenuProps = React.ComponentProps<'nav'>\r\n\r\nexport function DropdownMenu({\r\n  className,\r\n  children,\r\n  ...props\r\n}: DropdownMenuProps) {\r\n  return (\r\n    <DropdownMenuProvider>\r\n      <nav\r\n        className={cn('mx-auto w-full max-w-[200px] space-y-2', className)}\r\n        {...props}\r\n      >\r\n        {children}\r\n      </nav>\r\n    </DropdownMenuProvider>\r\n  )\r\n}\r\n\r\ntype DropdownMenuTriggerProps = {\r\n  asChild?: boolean\r\n} & React.ComponentProps<'button'>\r\n\r\nexport function DrodpownMenuTrigger({\r\n  asChild = false,\r\n  children,\r\n  className,\r\n  ...props\r\n}: DropdownMenuTriggerProps) {\r\n  const { isOpen, setIsOpen } = useDropdownMenu()\r\n\r\n  const Comp = asChild ? Slot : 'button'\r\n\r\n  return (\r\n    <Comp\r\n      className={cn(\r\n        'flex w-full max-w-[300px] items-center justify-between rounded-xl border border-border bg-main-secondary px-3.5 py-2.5 ease-out active:scale-[0.97]',\r\n        'focus-visible:border-border focus-visible:outline-none',\r\n\t\t\t\tclassName\r\n      )}\r\n      onClick={() => setIsOpen(prev => !prev)}\r\n      {...props}\r\n    >\r\n      {children}\r\n      <svg\r\n        width=\"15\"\r\n        height=\"15\"\r\n        viewBox=\"0 0 24 24\"\r\n        className={cn(\r\n          'text-neutral-400 duration-300 ease-out',\r\n          isOpen && 'rotate-180',\r\n        )}\r\n        fill=\"none\"\r\n        stroke=\"currentColor\"\r\n        strokeWidth=\"2\"\r\n        strokeLinecap=\"round\"\r\n        strokeLinejoin=\"round\"\r\n      >\r\n        <title>Chevron</title>\r\n        <path d=\"M12.22 2h-.44a2 2 0 0 0-2 2v.18a2 2 0 0 1-1 1.73l-.43.25a2 2 0 0 1-2 0l-.15-.08a2 2 0 0 0-2.73.73l-.22.38a2 2 0 0 0 .73 2.73l.15.1a2 2 0 0 1 1 1.72v.51a2 2 0 0 1-1 1.74l-.15.09a2 2 0 0 0-.73 2.73l.22.38a2 2 0 0 0 2.73.73l.15-.08a2 2 0 0 1 2 0l.43.25a2 2 0 0 1 1 1.73V20a2 2 0 0 0 2 2h.44a2 2 0 0 0 2-2v-.18a2 2 0 0 1 1-1.73l.43-.25a2 2 0 0 1 2 0l.15.08a2 2 0 0 0 2.73-.73l.22-.39a2 2 0 0 0-.73-2.73l-.15-.08a2 2 0 0 1-1-1.74v-.5a2 2 0 0 1 1-1.74l.15-.09a2 2 0 0 0 .73-2.73l-.22-.38a2 2 0 0 0-2.73-.73l-.15.08a2 2 0 0 1-2 0l-.43-.25a2 2 0 0 1-1-1.73V4a2 2 0 0 0-2-2z\" />\r\n        <circle cx=\"12\" cy=\"12\" r=\"3\" />\r\n      </svg>\r\n    </Comp>\r\n  )\r\n}\r\n\r\ntype DropdownMenuContentProps = {\r\n  floating?: boolean\r\n} & React.ComponentProps<typeof motion.ul>\r\n\r\nexport function DropdownMenuContent({\r\n  children,\r\n  floating = false,\r\n  className,\r\n  ...props\r\n}: DropdownMenuContentProps) {\r\n  const { isOpen } = useDropdownMenu()\r\n\r\n  return (\r\n    <motion.ul\r\n      className={cn(\r\n        'z-[1] mx-auto flex w-full max-w-[200px] flex-col gap-1.5 rounded-xl px-1.5 py-2.5',\r\n        'border border-border bg-main-secondary',\r\n        isOpen ? 'pointer-events-auto' : 'pointer-events-none',\r\n        floating ? 'absolute' : 'relative',\r\n        className,\r\n      )}\r\n      variants={content}\r\n      initial=\"hidden\"\r\n      animate={isOpen ? 'show' : 'hidden'}\r\n      exit=\"hidden\"\r\n      transition={{ duration: 0.2 }}\r\n      {...props}\r\n    >\r\n      {children}\r\n    </motion.ul>\r\n  )\r\n}\r\n\r\ntype DropdownMenuItemProps = {\r\n  asChild?: boolean\r\n} & React.ComponentProps<'button'>\r\n\r\nexport function DropdownMenuItem({\r\n  asChild = false,\r\n  children,\r\n  className,\r\n  ...props\r\n}: DropdownMenuItemProps) {\r\n  const Comp = asChild ? Slot : 'button'\r\n\r\n  return (\r\n    <motion.li variants={item} transition={{ duration: 0.2 }}>\r\n      <Comp\r\n        className={cn(\r\n          'flex w-full items-center gap-2 rounded-lg border border-transparent py-1 text-primary-muted transition-colors',\r\n          'hover:text-primary-foreground focus-visible:border-border focus-visible:text-primary-foreground focus-visible:outline-none',\r\n          'select-none px-1.5 hover:bg-main-foreground/60 focus-visible:bg-main-foreground/60',\r\n          className,\r\n        )}\r\n        {...props}\r\n      >\r\n        {children}\r\n      </Comp>\r\n    </motion.li>\r\n  )\r\n}\r\n\r\nconst Context = createContext(\r\n  {} as {\r\n    isOpen: boolean\r\n    setIsOpen: React.Dispatch<React.SetStateAction<boolean>>\r\n  },\r\n)\r\n\r\nfunction DropdownMenuProvider({ children }: { children: React.ReactNode }) {\r\n  const [isOpen, setIsOpen] = useState(false)\r\n\r\n  const value = { isOpen, setIsOpen }\r\n\r\n  return <Context.Provider value={value}>{children}</Context.Provider>\r\n}\r\n\r\nfunction useDropdownMenu() {\r\n  const { isOpen, setIsOpen } = useContext(Context)\r\n\r\n  return { isOpen, setIsOpen }\r\n}\r\n"
  }
}