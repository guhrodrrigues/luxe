{
  "name": "text",
  "type": "ui:components",
  "externalDependencies": [
    "@radix-ui/react-slot"
  ],
  "internalDependencies": [],
  "files": [
    {
      "name": "text.tsx",
      "content": "'use client' // @NOTE: Add in case you are using Next.js\n\nimport { motion, type MotionProps } from 'motion/react'\nimport * as Slot from '@radix-ui/react-slot'\n\nimport { cn } from '@/utils/cn'\n\ntype Variant = {\n  variant: string\n  component: React.FC<React.ComponentProps<'span'> & Partial<MotionProps>>\n}\n\nconst variants: readonly Variant[] = [\n  {\n    variant: 'shine',\n    component: ({ children, className, ...props }) => (\n      <motion.span\n        {...props}\n        className={cn(\n          'bg-[linear-gradient(110deg,#bfbfbf,35%,#000,50%,#bfbfbf,75%,#bfbfbf)] dark:bg-[linear-gradient(110deg,#404040,35%,#fff,50%,#404040,75%,#404040)]',\n          'bg-[length:200%_100%] bg-clip-text text-transparent',\n        )}\n        initial={{ backgroundPosition: '200% 0' }}\n        animate={{ backgroundPosition: '-200% 0' }}\n        transition={{\n          repeat: Number.POSITIVE_INFINITY,\n          duration: 2,\n          ease: 'linear',\n        }}\n      >\n        {children}\n      </motion.span>\n    ),\n  },\n  {\n    variant: 'generate-effect',\n    component: ({ children, className, ...props }) => {\n      if (typeof children !== 'string') return null\n\n      return (\n        <div className=\"inline-block whitespace-pre\">\n          {children.split('').map((char, index) => (\n            <motion.span\n              {...props}\n              key={char + String(index)}\n              className={cn(\n                'inline-block whitespace-pre text-primary-foreground',\n                className,\n              )}\n              initial={{ opacity: 0, filter: 'blur(4px)', rotateX: 90, y: 5 }}\n              whileInView={{\n                opacity: 1,\n                filter: 'blur(0px)',\n                rotateX: 0,\n                y: 0,\n              }}\n              transition={{\n                ease: 'easeOut',\n                duration: 0.3,\n                delay: index * 0.015,\n              }}\n              viewport={{ once: true }}\n            >\n              {char}\n            </motion.span>\n          ))}\n        </div>\n      )\n    },\n  },\n  {\n    variant: 'glitch',\n    component: ({ children, className, ...props }) => (\n      <div className=\"group relative overflow-hidden font-medium\">\n        <span {...props} className={cn('invisible', className)}>\n          {children}\n        </span>\n        <span\n          {...props}\n          className={cn(\n            'absolute top-0 left-0 text-primary-muted transition-transform duration-500 ease-in-out',\n            'group-hover:-translate-y-full hover:duration-300',\n            className,\n          )}\n        >\n          {children}\n        </span>\n        <span\n          {...props}\n          className={cn(\n            'absolute top-0 left-0 translate-y-full text-primary-muted transition-transform duration-500',\n            'ease-in-out hover:duration-300 group-hover:translate-y-0',\n            className,\n          )}\n        >\n          {children}\n        </span>\n      </div>\n    ),\n  },\n  {\n    variant: 'hover-enter',\n    component: ({ children, className, ...props }) => {\n      if (typeof children !== 'string') return null\n\n      const DURATION = 0.25\n      const STAGGER = 0.025\n\n      const letters = children\n        .split('')\n        .map(letter => (letter === ' ' ? '\\u00A0' : letter))\n\n      return (\n        <motion.span\n          {...props}\n          className={cn(\n            'relative block select-none overflow-hidden whitespace-nowrap text-primary-muted',\n            className,\n          )}\n          initial=\"initial\"\n          whileHover=\"hovered\"\n          style={{ lineHeight: 0.9 }}\n        >\n          <div>\n            {letters.map((letter, i) => (\n              <motion.span\n                key={String(i)}\n                className=\"inline-block\"\n                variants={{\n                  initial: { y: 0 },\n                  hovered: { y: '-100%' },\n                }}\n                transition={{\n                  duration: DURATION,\n                  ease: 'easeInOut',\n                  delay: STAGGER * i,\n                }}\n              >\n                {letter}\n              </motion.span>\n            ))}\n          </div>\n          <div className={cn('absolute inset-0')}>\n            {letters.map((letter, i) => (\n              <motion.span\n                key={String(i)}\n                className=\"inline-block\"\n                variants={{\n                  initial: { y: '100%' },\n                  hovered: { y: 0 },\n                }}\n                transition={{\n                  duration: DURATION,\n                  ease: 'easeInOut',\n                  delay: STAGGER * i,\n                }}\n              >\n                {letter}\n              </motion.span>\n            ))}\n          </div>\n        </motion.span>\n      )\n    },\n  },\n  {\n    variant: 'shake',\n    component: ({ children, className, ...props }) => (\n      <span\n        {...props}\n        className={cn(\n          'text-primary-muted hover:animate-text-shake',\n          className,\n        )}\n      >\n        {children}\n      </span>\n    ),\n  },\n] as const\n\nexport type TextProps = {\n  variant?: (typeof variants)[number]['variant']\n} & React.ComponentProps<'span'> &\n  Partial<MotionProps>\n\nexport function Text({ variant = 'shine', ...props }: TextProps) {\n  const FALLBACK_INDEX = 0\n\n  const variantComponent = variants.find(v => v.variant === variant)?.component\n\n  if (!variantComponent) {\n    return variants[FALLBACK_INDEX].component(props)\n  }\n\n  return (\n    <Slot.Root className={cn('font-medium text-sm')}>\n      {variantComponent\n        ? variantComponent(props)\n        : variants[FALLBACK_INDEX].component(props)}\n    </Slot.Root>\n  )\n}\n"
    }
  ]
}