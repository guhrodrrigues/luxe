{
  "name": "text",
  "externalDependencies": [
    "@radix-ui/react-slot"
  ],
  "internalDependencies": [],
  "file": {
    "name": "text.tsx",
    "content": "'use client' // @NOTE: Add in case you are using Next.js\r\n\r\nimport { motion, type MotionProps } from 'motion/react'\r\nimport * as Slot from '@radix-ui/react-slot'\r\n\r\nimport { cn } from '<%= it.aliases.utils %>/cn'\r\n\r\ntype Variant = {\r\n  variant: string\r\n  component: React.FC<React.ComponentProps<'span'> & Partial<MotionProps>>\r\n}\r\n\r\nconst variants = [\r\n  {\r\n    variant: 'shine',\r\n    component: ({ children, className, ...props }) => (\r\n      <motion.span\r\n        {...props}\r\n        className={cn(\r\n          'bg-[linear-gradient(110deg,#bfbfbf,35%,#000,50%,#bfbfbf,75%,#bfbfbf)] dark:bg-[linear-gradient(110deg,#404040,35%,#fff,50%,#404040,75%,#404040)]',\r\n          'bg-[length:200%_100%] bg-clip-text text-transparent',\r\n\t\t\t\t\tclassName\r\n        )}\r\n        initial={{ backgroundPosition: '200% 0' }}\r\n        animate={{ backgroundPosition: '-200% 0' }}\r\n        transition={{\r\n          repeat: Number.POSITIVE_INFINITY,\r\n          duration: 2,\r\n          ease: 'linear',\r\n        }}\r\n      >\r\n        {children}\r\n      </motion.span>\r\n    ),\r\n  },\r\n  {\r\n    variant: 'generate-effect',\r\n    component: ({ children, className, ...props }) => {\r\n      if (typeof children !== 'string') return null\r\n\r\n      return (\r\n        <div className=\"inline-block whitespace-pre\">\r\n          {children.split('').map((char, index) => (\r\n            <motion.span\r\n              {...props}\r\n              key={char + String(index)}\r\n              className={cn(\r\n                'inline-block whitespace-pre text-primary-foreground',\r\n                className,\r\n              )}\r\n              initial={{ opacity: 0, filter: 'blur(4px)', rotateX: 90, y: 5 }}\r\n              whileInView={{\r\n                opacity: 1,\r\n                filter: 'blur(0px)',\r\n                rotateX: 0,\r\n                y: 0,\r\n              }}\r\n              transition={{\r\n                ease: 'easeOut',\r\n                duration: 0.3,\r\n                delay: index * 0.015,\r\n              }}\r\n              viewport={{ once: true }}\r\n            >\r\n              {char}\r\n            </motion.span>\r\n          ))}\r\n        </div>\r\n      )\r\n    },\r\n  },\r\n  {\r\n    variant: 'glitch',\r\n    component: ({ children, className, ...props }) => (\r\n      <div className=\"group relative overflow-hidden font-medium\">\r\n        <span {...props} className={cn('invisible', className)}>\r\n          {children}\r\n        </span>\r\n        <span\r\n          {...props}\r\n          className={cn(\r\n            'absolute top-0 left-0 text-primary-muted transition-transform duration-500 ease-in-out',\r\n            'group-hover:-translate-y-full hover:duration-300',\r\n            className,\r\n          )}\r\n        >\r\n          {children}\r\n        </span>\r\n        <span\r\n          {...props}\r\n          className={cn(\r\n            'absolute top-0 left-0 translate-y-full text-primary-muted transition-transform duration-500',\r\n            'ease-in-out hover:duration-300 group-hover:translate-y-0',\r\n            className,\r\n          )}\r\n        >\r\n          {children}\r\n        </span>\r\n      </div>\r\n    ),\r\n  },\r\n  {\r\n    variant: 'hover-enter',\r\n    component: ({ children, className, ...props }) => {\r\n      if (typeof children !== 'string') return null\r\n\r\n      const DURATION = 0.25\r\n      const STAGGER = 0.025\r\n\r\n      const letters = children\r\n        .split('')\r\n        .map(letter => (letter === ' ' ? '\\u00A0' : letter))\r\n\r\n      return (\r\n        <motion.span\r\n          {...props}\r\n          className={cn(\r\n            'relative block select-none overflow-hidden whitespace-nowrap text-primary-muted',\r\n            className,\r\n          )}\r\n          initial=\"initial\"\r\n          whileHover=\"hovered\"\r\n          style={{ lineHeight: 0.9 }}\r\n        >\r\n          <div>\r\n            {letters.map((letter, i) => (\r\n              <motion.span\r\n                key={String(i)}\r\n                className=\"inline-block\"\r\n                variants={{\r\n                  initial: { y: 0 },\r\n                  hovered: { y: '-100%' },\r\n                }}\r\n                transition={{\r\n                  duration: DURATION,\r\n                  ease: 'easeInOut',\r\n                  delay: STAGGER * i,\r\n                }}\r\n              >\r\n                {letter}\r\n              </motion.span>\r\n            ))}\r\n          </div>\r\n          <div className={cn('absolute inset-0')}>\r\n            {letters.map((letter, i) => (\r\n              <motion.span\r\n                key={String(i)}\r\n                className=\"inline-block\"\r\n                variants={{\r\n                  initial: { y: '100%' },\r\n                  hovered: { y: 0 },\r\n                }}\r\n                transition={{\r\n                  duration: DURATION,\r\n                  ease: 'easeInOut',\r\n                  delay: STAGGER * i,\r\n                }}\r\n              >\r\n                {letter}\r\n              </motion.span>\r\n            ))}\r\n          </div>\r\n        </motion.span>\r\n      )\r\n    },\r\n  },\r\n  {\r\n    variant: 'shake',\r\n    component: ({ children, className, ...props }) => (\r\n      <span\r\n        {...props}\r\n        className={cn(\r\n          'text-primary-muted hover:animate-text-shake',\r\n          className,\r\n        )}\r\n      >\r\n        {children}\r\n      </span>\r\n    ),\r\n  },\r\n  {\r\n    variant: 'hover-decoration',\r\n    component: ({ children, className, ...props }) => (\r\n      <div\r\n        className={cn(\r\n          'relative after:absolute after:bottom-0 after:left-0 after:h-px after:w-full after:origin-bottom-right',\r\n          'after:scale-x-0 after:bg-primary-muted after:transition-transform after:duration-300 after:ease-in-out hover:after:origin-bottom-left hover:after:scale-x-100'\r\n        )}\r\n      >\r\n        <span \r\n          {...props} \r\n          className={cn(\r\n            'text-primary-muted', \r\n            className\r\n          )}\r\n        >\r\n          {children}\r\n        </span>\r\n      </div>\r\n    ),\r\n  },\r\n] as const satisfies readonly Variant[]\r\n\r\nexport type TextProps = {\r\n  variant?: (typeof variants)[number]['variant']\r\n} & React.ComponentProps<'span'> &\r\n  Partial<MotionProps>\r\n\r\nexport function Text({ variant = 'shine', className, ...props }: TextProps) {\r\n  const FALLBACK_INDEX = 0\r\n\r\n  const variantComponent = variants.find(v => v.variant === variant)?.component\r\n\r\n  const Component = variantComponent || variants[FALLBACK_INDEX].component\r\n\r\n  return (\r\n    <Slot.Root className={cn('font-medium text-sm')}>\r\n      <Component {...props} className={className} />\r\n    </Slot.Root>\r\n  )\r\n}\r\n"
  }
}